// Code generated by MockGen. DO NOT EDIT.
// Source: ../../infra/proto/order_service/order_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=../../infra/proto/order_service/order_service_grpc.pb.go -destination=mock_order_service.go -package=controller
//

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"

	order_service "github.com/AmitSuresh/orderapi/src/infra/proto/order_service"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockOrderServiceClient is a mock of OrderServiceClient interface.
type MockOrderServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceClientMockRecorder
}

// MockOrderServiceClientMockRecorder is the mock recorder for MockOrderServiceClient.
type MockOrderServiceClientMockRecorder struct {
	mock *MockOrderServiceClient
}

// NewMockOrderServiceClient creates a new mock instance.
func NewMockOrderServiceClient(ctrl *gomock.Controller) *MockOrderServiceClient {
	mock := &MockOrderServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrderServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceClient) EXPECT() *MockOrderServiceClientMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderServiceClient) CreateOrder(ctx context.Context, in *order_service.OrderReq, opts ...grpc.CallOption) (*order_service.OrderResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrder", varargs...)
	ret0, _ := ret[0].(*order_service.OrderResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceClientMockRecorder) CreateOrder(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).CreateOrder), varargs...)
}

// MockOrderServiceServer is a mock of OrderServiceServer interface.
type MockOrderServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceServerMockRecorder
}

// MockOrderServiceServerMockRecorder is the mock recorder for MockOrderServiceServer.
type MockOrderServiceServerMockRecorder struct {
	mock *MockOrderServiceServer
}

// NewMockOrderServiceServer creates a new mock instance.
func NewMockOrderServiceServer(ctrl *gomock.Controller) *MockOrderServiceServer {
	mock := &MockOrderServiceServer{ctrl: ctrl}
	mock.recorder = &MockOrderServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceServer) EXPECT() *MockOrderServiceServerMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderServiceServer) CreateOrder(arg0 context.Context, arg1 *order_service.OrderReq) (*order_service.OrderResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(*order_service.OrderResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceServerMockRecorder) CreateOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).CreateOrder), arg0, arg1)
}

// MockUnsafeOrderServiceServer is a mock of UnsafeOrderServiceServer interface.
type MockUnsafeOrderServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOrderServiceServerMockRecorder
}

// MockUnsafeOrderServiceServerMockRecorder is the mock recorder for MockUnsafeOrderServiceServer.
type MockUnsafeOrderServiceServerMockRecorder struct {
	mock *MockUnsafeOrderServiceServer
}

// NewMockUnsafeOrderServiceServer creates a new mock instance.
func NewMockUnsafeOrderServiceServer(ctrl *gomock.Controller) *MockUnsafeOrderServiceServer {
	mock := &MockUnsafeOrderServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOrderServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOrderServiceServer) EXPECT() *MockUnsafeOrderServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOrderServiceServer mocks base method.
func (m *MockUnsafeOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrderServiceServer")
}

// mustEmbedUnimplementedOrderServiceServer indicates an expected call of mustEmbedUnimplementedOrderServiceServer.
func (mr *MockUnsafeOrderServiceServerMockRecorder) mustEmbedUnimplementedOrderServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrderServiceServer", reflect.TypeOf((*MockUnsafeOrderServiceServer)(nil).mustEmbedUnimplementedOrderServiceServer))
}
